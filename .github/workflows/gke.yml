# This workflow will deploy manifests to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the service account key.
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER and IMAGE environment variables (below).

name: Deploy to GKE

on:
  push:
    branches:
    - master

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  ANNOUNCER_SYSTEM_GITHUB_USER: ${{ secrets.ANNOUNCER_SYSTEM_GITHUB_USER }}
  ANNOUNCER_SYSTEM_GITHUB_TOKEN: ${{ secrets.ANNOUNCER_SYSTEM_GITHUB_TOKEN }}
  ANNOUNCER_SYSTEM_TELEGRAM_CHATID: ${{ secrets.ANNOUNCER_SYSTEM_TELEGRAM_CHATID }}
  ANNOUNCER_SYSTEM_TELEGRAM_TOKEN: ${{ secrets.ANNOUNCER_SYSTEM_TELEGRAM_TOKEN }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: asia-southeast1-a
  GKE_CLUSTER: community-cluster-1

jobs:
  setup-deploy:
    name: Setup and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@master

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    # Deploy argocd apps to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        ANNOUNCER_SYSTEM_GITHUB_USER_BASE64=$(echo $ANNOUNCER_SYSTEM_GITHUB_USER | base64)
        ANNOUNCER_SYSTEM_GITHUB_TOKEN_BASE64=$(echo $ANNOUNCER_SYSTEM_GITHUB_TOKEN | base64)
        ANNOUNCER_SYSTEM_TELEGRAM_CHATID_BASE64=$(echo $ANNOUNCER_SYSTEM_TELEGRAM_CHATID | base64)
        ANNOUNCER_SYSTEM_TELEGRAM_TOKEN_BASE64=$(echo $ANNOUNCER_SYSTEM_TELEGRAM_TOKEN | base64)
        cat secret.tmpl | envsubst | kubectl apply -f - 
        kubectl apply -f apps.yaml
